

import click
import asyncio
from report.reporter import generate_report
from validator.validator import validate_vulnerability
from scanner.scanner import run_scan
from infrastructure.task_queue import TaskQueue

@click.group()
def cli():
    """Autonomous Pentester CLI"""
    pass

@cli.command()
@click.argument('targets', nargs=-1)
def scan(targets):
    """Run penetration test scans on multiple TARGETS concurrently"""
    async def run_scans():
        task_queue = TaskQueue(worker_count=5)
        await task_queue.start_workers()
        results = []
        for target in targets:
            # run_scan is synchronous, run in thread to avoid await error
            result = await asyncio.to_thread(run_scan, target)
            results.append(result)
        await task_queue.wait_completion()
        return results

    click.echo(f"Starting concurrent scans on {len(targets)} targets...")
    results = asyncio.run(run_scans())
    click.echo("All scans completed.")
    for res in results:
        generate_report(res)
    click.echo("Reports generated.")

import click
import asyncio
from report.reporter import generate_report
from validator.validator import validate_vulnerability
from scanner.scanner import run_scan
from infrastructure.task_queue import TaskQueue
from infrastructure.hackerone_api import HackerOneAPI

@click.group()
def cli():
    """Autonomous Pentester CLI"""
    pass

@cli.command()
@click.argument('targets', nargs=-1)
def scan(targets):
    """Run penetration test scans on multiple TARGETS concurrently"""
    async def run_scans():
        task_queue = TaskQueue(worker_count=5)
        await task_queue.start_workers()
        results = []
        for target in targets:
            result = await task_queue.add_task(run_scan, target)
            results.append(result)
        await task_queue.wait_completion()
        return results

    click.echo(f"Starting concurrent scans on {len(targets)} targets...")
    results = asyncio.run(run_scans())
    click.echo("All scans completed.")
    for res in results:
        generate_report(res)
    click.echo("Reports generated.")

@cli.command()
@click.argument('url')
@click.argument('payload')
def validate(url, payload):
    """Validate a vulnerability on URL with PAYLOAD"""
    click.echo(f"Validating vulnerability on {url} with payload: {payload}")
    is_valid = validate_vulnerability(url, payload)
    if is_valid:
        click.echo("Vulnerability validated successfully.")
    else:
        click.echo("Vulnerability validation failed.")

@cli.command()
@click.argument('program_handle')
@click.argument('title')
@click.argument('description')
@click.argument('severity')
def submit_report(program_handle, title, description, severity):
    """Submit a vulnerability report to HackerOne"""
    try:
        api = HackerOneAPI()
        response = api.submit_vulnerability(program_handle, title, description, severity)
        click.echo(f"Report submitted successfully: {response}")
    except Exception as e:
        click.echo(f"Failed to submit report: {e}")

@cli.command()
@click.argument('report_id')
def check_report(report_id):
    """Check the status of a submitted report"""
    try:
        api = HackerOneAPI()
        response = api.get_report_status(report_id)
        click.echo(f"Report status: {response}")
    except Exception as e:
        click.echo(f"Failed to get report status: {e}")

@cli.command()
def report():
    """Generate the latest scan report"""
    generate_report()
    click.echo("Report generated.")

if __name__ == '__main__':
    cli()
