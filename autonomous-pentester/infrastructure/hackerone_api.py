import requests
import os

class HackerOneAPI:
    def __init__(self, api_token=None):
        self.api_token = api_token or os.getenv("HACKERONE_API_TOKEN")
        self.base_url = "https://api.hackerone.com/v1"
        if not self.api_token:
            raise ValueError("HackerOne API token must be provided via parameter or HACKERONE_API_TOKEN environment variable")

    def _headers(self):
        return {
            "Authorization": f"Bearer {self.api_token}",
            "Accept": "application/json",
            "Content-Type": "application/json"
        }

    def submit_vulnerability(self, program_handle, title, description, severity, references=None):
        """
        Submit a vulnerability report to a HackerOne program.
        """
        url = f"{self.base_url}/reports"
        payload = {
            "data": {
                "type": "report",
                "attributes": {
                    "title": title,
                    "description": description,
                    "severity": severity,
                    "program": program_handle,
                    "references": references or []
                }
            }
        }
        response = requests.post(url, json=payload, headers=self._headers())
        if response.status_code == 201:
            return response.json()
        else:
            raise Exception(f"Failed to submit report: {response.status_code} {response.text}")

    def get_report_status(self, report_id):
        """
        Get the status of a submitted report.
        """
        url = f"{self.base_url}/reports/{report_id}"
        response = requests.get(url, headers=self._headers())
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"Failed to get report status: {response.status_code} {response.text}")
