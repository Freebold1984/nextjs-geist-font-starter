import requests

class RealVulnerabilityScanner:
    """
    Enhanced real vulnerability scanner for dynamic payload injection and response analysis.
    Supports basic SQL Injection, XSS, and CSRF detection.
    """

    def __init__(self, target):
        self.target = target if target.startswith("http") else "http://" + target

    def scan_sql_injection(self):
        payload = "' OR '1'='1"
        params = {'input': payload}
        try:
            response = requests.get(self.target, params=params, timeout=5)
            # Check for common SQL error strings or payload reflection
            if payload in response.text or "sql syntax" in response.text.lower() or "mysql" in response.text.lower():
                return {
                    "type": "SQL Injection",
                    "severity": "High",
                    "description": "Possible SQL Injection detected with payload.",
                    "payload": payload
                }
        except Exception as e:
            print(f"SQLi scan error: {e}")
        return None

    def scan_xss(self):
        payload = "<script>alert(1)</script>"
        params = {'input': payload}
        try:
            response = requests.get(self.target, params=params, timeout=5)
            # Check if payload is reflected in response
            if payload in response.text:
                return {
                    "type": "XSS",
                    "severity": "Medium",
                    "description": "Possible XSS detected with payload.",
                    "payload": payload
                }
        except Exception as e:
            print(f"XSS scan error: {e}")
        return None

    def scan_csrf(self):
        # Simple heuristic: check if CSRF token is missing in forms
        try:
            response = requests.get(self.target, timeout=5)
            if '<form' in response.text and 'csrf' not in response.text.lower():
                return {
                    "type": "CSRF",
                    "severity": "Low",
                    "description": "Possible CSRF vulnerability: missing CSRF token in form.",
                    "payload": None
                }
        except Exception as e:
            print(f"CSRF scan error: {e}")
        return None

    def run(self):
        vulnerabilities = []
        sqli_result = self.scan_sql_injection()
        if sqli_result:
            vulnerabilities.append(sqli_result)
        xss_result = self.scan_xss()
        if xss_result:
            vulnerabilities.append(xss_result)
        csrf_result = self.scan_csrf()
        if csrf_result:
            vulnerabilities.append(csrf_result)
        return vulnerabilities
